version: '3.8'

services:
  # Blockchain Indexer
  indexer:
    build: .
    container_name: lucky_ponds_indexer
    command: python indexer.py
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network

  # Points Calculator (cron-based)
  calculator:
    build: .
    container_name: lucky_ponds_calculator
    environment:
      - TZ=UTC
    command: |
      sh -c "
        cat > /tmp/calculator_cron << 'EOF'
        PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        SHELL=/bin/bash
        EVENTS_DB_PATH=/app/data/events.db
        APP_DB_PATH=/app/data/application.db
        TOSS_POINTS_MULTIPLIER=${TOSS_POINTS_MULTIPLIER:-10}
        WIN_POINTS=${WIN_POINTS:-100}
        REFERRAL_BONUS_POINTS=${REFERRAL_BONUS_POINTS:-20}
        
        # Points calculation - configurable interval (default every hour at :30)
        30 * * * * cd /app && python points_calculator.py >> /app/data/calculator.log 2>&1
        
        # Health check every 6 hours
        0 */6 * * * echo \"\$(date): Health check - Points calculator active\" >> /app/data/calculator.log 2>&1
      EOF
        crontab /tmp/calculator_cron &&
        echo 'Crontab installed:' &&
        crontab -l &&
        cron -f
      "
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network
    depends_on:
      - indexer

  # Winner Selector (cron-based, UTC timezone)
  keeper:
    build: .
    container_name: lucky_ponds_keeper
    environment:
      - TZ=UTC
    command: |
      sh -c "
        cat > /tmp/keeper_cron << 'EOF'
        PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        SHELL=/bin/bash
        EVENTS_DB_PATH=/app/data/events.db
        APP_DB_PATH=/app/data/application.db
        RPC_URL=${RPC_URL}
        CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
        PRIVATE_KEY=${PRIVATE_KEY}
        GAS_LIMIT=${GAS_LIMIT:-300000}
        GAS_PRICE_GWEI=${GAS_PRICE_GWEI:-20}
        
        # 5-minute ponds: 30 seconds after each 5-minute interval (21s timelock + buffer)
        0,5,10,15,20,25,30,35,40,45,50,55 * * * * cd /app && python winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Hourly ponds: 90 seconds after each hour (61s timelock + buffer)
        1 * * * * cd /app && /usr/local/bin/python winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Daily ponds: 90 seconds after midnight UTC (61s timelock + buffer)
        1 0 * * * cd /app && /usr/local/bin/python winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Weekly ponds: 90 seconds after Saturday midnight UTC (61s timelock + buffer)
        1 0 * * 6 cd /app && /usr/local/bin/python winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Monthly ponds: 90 seconds after first day of month midnight UTC (61s timelock + buffer)
        1 0 1 * * cd /app && /usr/local/bin/python winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Health check every hour at :02
        2 * * * * echo \"\$(date): Health check - Winner selector active\" >> /app/data/keeper.log 2>&1
      EOF
        crontab /tmp/keeper_cron &&
        echo 'Crontab installed:' &&
        crontab -l &&
        cron -f
      "
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network

  # API Server
  api:
    build: .
    container_name: lucky_ponds_api
    command: gunicorn --bind 0.0.0.0:5000 app:app --workers 4 --timeout 120
    ports:
      - "${API_PORT:-5000}:5000"
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network
    depends_on:
      - indexer

  # Database Setup (run once)
  setup:
    build: .
    container_name: lucky_ponds_setup
    command: python db_setup.py
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    networks:
      - lucky_ponds_network

networks:
  lucky_ponds_network:
    driver: bridge