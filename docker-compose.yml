version: '3.8'

services:
  # Blockchain Indexer
  indexer:
    build: .
    container_name: lucky_ponds_indexer
    command: python indexer.py
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network

  # Points Calculator (cron-based)
  calculator:
    build: .
    container_name: lucky_ponds_calculator
    environment:
      - TZ=UTC
    command: |
      sh -c "
        # Points calculation every hour at 30 minutes past the hour
        echo '30 * * * * /usr/local/bin/python /app/points_calculator.py >> /app/data/calculator.log 2>&1' | crontab - &&
        cron -f
      "
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network
    depends_on:
      - indexer

  # Winner Selector (cron-based, UTC timezone)
  keeper:
    build: .
    container_name: lucky_ponds_keeper
    environment:
      - TZ=UTC
    command: |
      sh -c "
        # Create crontab with precise timing for each pond type
        cat > /tmp/keeper_cron << 'EOF'
        # 5-minute ponds: 30 seconds after timelock expires
        0,5,10,15,20,25,30,35,40,45,50,55 * * * * /usr/local/bin/python /app/winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Hourly ponds: 90 seconds after each hour
        1 * * * * /usr/local/bin/python /app/winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Daily ponds: 90 seconds after midnight UTC
        1 0 * * * /usr/local/bin/python /app/winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Weekly ponds: 90 seconds after Saturday midnight UTC
        1 0 * * 6 /usr/local/bin/python /app/winner_selector.py >> /app/data/keeper.log 2>&1
        
        # Monthly ponds: 90 seconds after first day of month
        1 0 1 * * /usr/local/bin/python /app/winner_selector.py >> /app/data/keeper.log 2>&1
      EOF
        crontab /tmp/keeper_cron &&
        cron -f
      "
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network

  # API Server
  api:
    build: .
    container_name: lucky_ponds_api
    command: gunicorn --bind 0.0.0.0:5000 app:app --workers 4 --timeout 120
    ports:
      - "${API_PORT:-5000}:5000"
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - lucky_ponds_network
    depends_on:
      - indexer

  # Database Setup
  setup:
    build: .
    container_name: lucky_ponds_setup
    command: python db_setup.py
    env_file:
      - .env
    volumes:
      - ./data:/app/data
    networks:
      - lucky_ponds_network

networks:
  lucky_ponds_network:
    driver: bridge